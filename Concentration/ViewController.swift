//
//  ViewController.swift
//  Concentration
//
//  Created by –¢–∞—Ç—å—è–Ω–∞ –ü—è—Ç—ã—Ö–∏–Ω–∞ on 12.09.2018.
//  Copyright ¬© 2018 –¢–∞—Ç—å—è–Ω–∞ –ü—è—Ç—ã—Ö–∏–Ω–∞. All rights reserved.
//
import UIKit

class ViewController: UIViewController {
    
    private(set) var flipCount = 0
    
    private lazy var game = Concentration(numberOfPairsOfCards: numberOfPairsOfCards)
    
    var numberOfPairsOfCards: Int {
        return (cardButtons.count + 1) / 2
    }
    
    @IBOutlet private var cardButtons: [UIButton]!
    
    private var Themes: Dictionary<String, String> = [
        "Animals": "üê∂üê±üê≠üê∞ü¶äüêªüêºüê∏üêíü¶Åüê∑üêÆüê•üê¨üêôüêòüêáüêìüêéüêüü¶Äüêùü¶áüê®",
        "Fruits": "üçèüçêüçäüçãüçåüçâüçáüçìüçàüçíüçëüççü••ü•ù",
        "FastFood": "üçîüçüü•´üçïüåÆüåØüç±üçøüå≠ü•êü•†üçùüç§",
        "Faces": "üòÉüòÖüòÇüòòüòçüòáüòéüòúüò°üò≠üò±üòµüòàü§ìüòäüò¥",
        "Sport": "‚öΩÔ∏èüèÄüèà‚öæÔ∏èüéæüèêüèâüé±üèìüè∏ü•ä‚õ∏ü•åüèëü•Ö",
        "Travel": "‚õ±üèùüåãüö¶üó∫üèïüèñüõ∂üóΩüóºüè∞üöèüóøüèüüõ§",
        "Transport": "üöóüöïüöåüöéüöìüèéüöíüöëüöêüöõüèçüöÉ‚úàÔ∏èüö§üöä‚õµÔ∏è",
        "Numbers": "0Ô∏è‚É£1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£8Ô∏è‚É£9Ô∏è‚É£üîü#Ô∏è‚É£*Ô∏è‚É£",
        "Flags": "üá¶üá∫üá¶üáøüá¨üáßüè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åøüáßüá∑üáßüá™üá¶üá≤üáßüá∂üáßüáæüáßüá¨üá™üá¨üáÆüá±üáÆüá®üá±üá∫üá∑üá∫üá©üá∞üá¨üáπ"
    ]
    
    private var currentEmojies = ""
    
    private var themeIndex = 0 {
        didSet {
            currentEmojies = Themes[Array(Themes.keys)[themeIndex]]!
            emoji = [Card: String]()
        }
    }
    
    private var themeKeys: [String] {
        return Array(Themes.keys)
    }
    
    private var emoji = [Card: String]()
    
    override func viewDidLoad() {
        themeIndex = themeKeys.count.arc4random
        updateViewFromModel()
    }
    
    @IBOutlet private weak var flipCountLabel: UILabel! {
        didSet {
            flipCountLabel.text = "Flips: \(flipCount)"
        }
    }
    
    @IBOutlet weak var scoreLabel: UILabel! {
        didSet {
            scoreLabel.text = "Score: \(game.score)"
        }
    }
    
    @IBAction func newGameButton(_ sender: UIButton) {
        flipCount = 0
        themeIndex = themeKeys.count.arc4random
        game = newConcentration()
        updateViewFromModel()
    }
    
    private func newConcentration() -> Concentration {
        return Concentration(numberOfPairsOfCards: (cardButtons.count + 1) / 2)
    }
    
    @IBAction func touchCard(_ sender: UIButton) {
        flipCount += 1
        if let cardNumber = cardButtons.index(of: sender) {
            game.chooseCard(at: cardNumber)
            updateViewFromModel()
        } else {
            print ("choosen card is not in cardButtons")
        }
    }
    
    private func updateViewFromModel() {
        for index in cardButtons.indices {
            let button = cardButtons[index]
            let card = game.cards[index]
            
            if card.isFaceUp {
                button.setTitle(emoji (for: card), for: UIControlState.normal)
                button.backgroundColor = #colorLiteral(red: 1, green: 0.8896149993, blue: 0.7366457582, alpha: 1)
            } else {
                button.setTitle("", for: UIControlState.normal)
                button.backgroundColor = card.isMatched ? UIColor.clear :#colorLiteral(red: 0.7042355537, green: 0.4285730422, blue: 0.3668116331, alpha: 1)
            }
        }
        scoreLabel.text = "Score: \(game.score)"
        flipCountLabel.text = "Flips: \(flipCount)"
    }
    
    private func emoji(for card: Card) -> String {
        if emoji[card] == nil, currentEmojies.count > 0 {
            let randomStringIndex = currentEmojies.index(currentEmojies.startIndex, offsetBy: currentEmojies.count.arc4random)
            emoji[card] = String(currentEmojies.remove(at: randomStringIndex))
        }
        return emoji[card] ?? "?"
    }
}


extension Int {
    var arc4random: Int {
        if self > 0 {
            return Int(arc4random_uniform(UInt32(self)))
        } else if self < 0 {
            return -Int(arc4random_uniform(UInt32(abs(self))))
        } else {
            return 0
        }
    }
}
